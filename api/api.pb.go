// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	ParseRequest
	ParseResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParseRequest_ParseKind int32

const (
	ParseRequest_INVALID ParseRequest_ParseKind = 0
	ParseRequest_LANG    ParseRequest_ParseKind = 1
	ParseRequest_UAST    ParseRequest_ParseKind = 2
)

var ParseRequest_ParseKind_name = map[int32]string{
	0: "INVALID",
	1: "LANG",
	2: "UAST",
}
var ParseRequest_ParseKind_value = map[string]int32{
	"INVALID": 0,
	"LANG":    1,
	"UAST":    2,
}

func (x ParseRequest_ParseKind) String() string {
	return proto.EnumName(ParseRequest_ParseKind_name, int32(x))
}
func (ParseRequest_ParseKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ParseRequest struct {
	Kind    ParseRequest_ParseKind `protobuf:"varint,1,opt,name=kind,enum=ParseRequest_ParseKind" json:"kind,omitempty"`
	Name    string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Content []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Lang    string                 `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParseRequest) GetKind() ParseRequest_ParseKind {
	if m != nil {
		return m.Kind
	}
	return ParseRequest_INVALID
}

func (m *ParseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParseRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ParseRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type ParseResponse struct {
	Lang string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
}

func (m *ParseResponse) Reset()                    { *m = ParseResponse{} }
func (m *ParseResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseResponse) ProtoMessage()               {}
func (*ParseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ParseResponse) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "VersionResponse")
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseResponse)(nil), "ParseResponse")
	proto.RegisterEnum("ParseRequest_ParseKind", ParseRequest_ParseKind_name, ParseRequest_ParseKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Engine service

type EngineClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/Engine/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := grpc.Invoke(ctx, "/Engine/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Engine service

type EngineServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Engine_Version_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _Engine_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4e, 0xc3, 0x30,
	0x10, 0x44, 0xeb, 0x12, 0x1a, 0xb2, 0xb4, 0xa9, 0xb5, 0x17, 0xac, 0x9e, 0x2a, 0x73, 0x89, 0x54,
	0xe4, 0x43, 0xf9, 0x82, 0x48, 0x20, 0x54, 0x51, 0x55, 0x28, 0x40, 0xef, 0x29, 0xb5, 0x2a, 0x0b,
	0x58, 0x87, 0x38, 0xf0, 0x53, 0xfc, 0x24, 0x8a, 0x93, 0x14, 0xc2, 0x6d, 0x66, 0x33, 0x79, 0xeb,
	0x1d, 0x88, 0xf2, 0xc2, 0xa8, 0xa2, 0xb4, 0x95, 0x95, 0x1c, 0xe2, 0xad, 0x2e, 0x9d, 0xb1, 0x94,
	0xe9, 0x8f, 0x4f, 0xed, 0x2a, 0xb9, 0x80, 0xe9, 0x71, 0xe2, 0x0a, 0x4b, 0x4e, 0xa3, 0x80, 0xf0,
	0xab, 0x19, 0x09, 0x36, 0x67, 0x49, 0x94, 0x75, 0x56, 0x7e, 0x33, 0x18, 0x3f, 0xe4, 0xa5, 0xd3,
	0xed, 0xdf, 0xb8, 0x80, 0xe0, 0xd5, 0xd0, 0xde, 0xe7, 0xe2, 0xe5, 0x85, 0xfa, 0xfb, 0xb1, 0x31,
	0xf7, 0x86, 0xf6, 0x99, 0x0f, 0x21, 0x42, 0x40, 0xf9, 0xbb, 0x16, 0x43, 0x0f, 0xf5, 0xba, 0xde,
	0xf5, 0x62, 0xa9, 0xd2, 0x54, 0x89, 0x93, 0x39, 0x4b, 0xc6, 0x59, 0x67, 0xeb, 0xf4, 0x5b, 0x4e,
	0x07, 0x11, 0x34, 0xe9, 0x5a, 0xcb, 0x2b, 0x88, 0x8e, 0x50, 0x3c, 0x87, 0x70, 0xb5, 0xd9, 0xa6,
	0xeb, 0xd5, 0x0d, 0x1f, 0xe0, 0x19, 0x04, 0xeb, 0x74, 0x73, 0xc7, 0x59, 0xad, 0x9e, 0xd3, 0xc7,
	0x27, 0x3e, 0x94, 0x97, 0x30, 0x69, 0xdf, 0xd3, 0x1e, 0xd6, 0x21, 0xd9, 0x2f, 0x72, 0xb9, 0x83,
	0xd1, 0x2d, 0x1d, 0x0c, 0x69, 0x54, 0x10, 0xb6, 0x4d, 0xe0, 0x54, 0xf5, 0x5b, 0x9a, 0x71, 0xf5,
	0xaf, 0x24, 0x39, 0xc0, 0x04, 0x4e, 0x3d, 0x1e, 0x27, 0xbd, 0xb3, 0x67, 0xb1, 0xea, 0x6d, 0x95,
	0x83, 0xdd, 0xc8, 0x97, 0x7f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x32, 0xa3, 0xec, 0x89,
	0x01, 0x00, 0x00,
}
